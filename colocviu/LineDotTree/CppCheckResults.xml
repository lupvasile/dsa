<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="IO_Management.c" line="23" id="checkCastIntToCharAndBack" severity="style" msg='When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &quot;while (EOF != (c = getc());&quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.' />
    <error file="IO_Management.c" line="28" id="checkCastIntToCharAndBack" severity="style" msg='When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &quot;while (EOF != (c = getc());&quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.' />
    <error file="LDTree.c" line="44" id="invalidscanf" severity="style" msg='sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' />
    <error file="main.c" line="16" id="variableScope" severity="style" msg="The scope of the variable &apos;lch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="main.c" line="31" id="invalidscanf" severity="style" msg='fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' />
    <error file="main.c" line="23" id="checkCastIntToCharAndBack" severity="style" msg='When saving fgetc() return value in char variable there is loss of precision.  When fgetc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &quot;while (EOF != (c = fgetc());&quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.' />
    <error id="missingIncludeSystem" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
